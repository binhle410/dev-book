<?php

namespace Magenta\Bundle\CBookModelBundle\Entity\Classification;

use Magenta\Bundle\CBookModelBundle\Entity\Classification\Base\AppCategory;
use Sonata\ClassificationBundle\Entity\BaseCategory as BaseCategory;

//use Gedmo\Mapping\Annotation as Gedmo;
//use Sonata\TranslationBundle\Model\Gedmo\TranslatableInterface;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Knp\DoctrineBehaviors\Model as ORMBehaviors;

/**
 * This file has been generated by the Sonata EasyExtends bundle.
 *
 * @link https://sonata-project.org/bundles/easy-extends
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 * Gedmo\TranslationEntity(class="Application\Sonata\ClassificationBundle\Entity\CategoryTranslation")
 */

/**
 * @ORM\Entity
 * @ORM\Table(name="classification__category")
 * @ORM\HasLifecycleCallbacks
 */
class Category extends AppCategory {
	use ORMBehaviors\Translatable\Translatable;
	
	public function __construct() {
		parent::__construct();
	}
	
	/**
	 * @param string $locale
	 */
	public function setLocale($locale) {
		$this->setCurrentLocale($locale);
		
		return $this;
	}
	
	/**
	 * @return string
	 */
	public function getLocale() {
		return $this->getCurrentLocale();
	}
	
	public function getName() {
		if($this->getCurrentLocale() === $this->getDefaultLocale()) {
			return $this->name;
		}
		
		return $this->translate(null, true)->getName();
	}
	
	public function setName($name) {
		if($this->getCurrentLocale() === $this->getDefaultLocale()) {
			$this->name = $name;
			
			return $this;
		}
		$this->translate(null, true)->setName($name);
		
		return $this;
	}
	
	protected $description;
	
	public function getDescription() {
		if($this->getCurrentLocale() === $this->getDefaultLocale()) {
			return $this->description;
		}
		
		return $this->translate(null, true)->getDescription();
	}
	
	public function setDescription($description) {
		if($this->getCurrentLocale() === $this->getDefaultLocale()) {
			$this->description = $description;
			
			return $this;
		}
		$this->translate(null, true)->setDescription($description);
		
		return $this;
	}
}
